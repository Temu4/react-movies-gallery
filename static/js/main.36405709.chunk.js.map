{"version":3,"sources":["components/Header.jsx","components/MovieItem.jsx","components/PaginationList.jsx","utils/api.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","props","updateSortBy","handleClick","value","Nav","variant","defaultActiveKey","Item","Link","eventKey","onClick","MovieItem","state","showDescription","willWatch","toogleDescription","setState","this","movie","title","overview","id","vote_average","poster_path","backdrop_path","removeMovie","addMoviesToWillWatch","removeMoviesFromWillWatch","Card","style","width","marginBottom","Img","className","src","alt","Body","Title","Badge","pill","Text","Button","size","bind","Component","PaginationList","activePage","updatePage","number","active","items","push","Pagination","key","API_URL","API_KEY_3","App","movies","moviesWillWatch","sortBy","getMoviesData","fetch","then","response","json","data","results","page","updatedMovies","filter","updatedMoviesWillWatch","prevProps","prevState","Container","Row","Col","sm","map","lg","length","ListGroup","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36405709.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Nav} from 'react-bootstrap';\r\n\r\nconst Header = props => {\r\n  const {updateSortBy} = props;\r\n\r\n  const handleClick = value => () => {\r\n    updateSortBy(value);\r\n  };\r\n  return (\r\n    <Nav variant=\"pills\" defaultActiveKey=\"link-1\">\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"link-1\" onClick={handleClick('popularity.desc')}>\r\n          Popular\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"link-2\" onClick={handleClick('vote_count.desc')}>\r\n          Most voted\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"link-3\" onClick={handleClick('release_date.desc')}>\r\n          Recent\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport {Card, Button, Badge} from 'react-bootstrap';\r\n\r\nexport default class MovieItem extends Component {\r\n  state = {\r\n    showDescription: false,\r\n    willWatch: false\r\n  };\r\n\r\n  toogleDescription = () => {\r\n    this.setState({showDescription: !this.state.showDescription});\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      movie: {title, overview, id, vote_average, poster_path, backdrop_path},\r\n      removeMovie,\r\n      addMoviesToWillWatch,\r\n      removeMoviesFromWillWatch,\r\n      movie\r\n    } = this.props;\r\n\r\n    return (\r\n      <Card style={{width: '100%', marginBottom: '20px'}}>\r\n        <Card.Img\r\n          variant=\"top\"\r\n          className=\"movie__img\"\r\n          src={\r\n            poster_path || backdrop_path\r\n              ? `https://image.tmdb.org/t/p/w300/${poster_path || backdrop_path}`\r\n              : '/img/film-poster-placeholder.png'\r\n          }\r\n          alt={title}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title>\r\n            {title}\r\n            <Badge pill variant=\"warning\" className=\"ml-1\">\r\n              {vote_average}\r\n            </Badge>\r\n          </Card.Title>\r\n          <Card.Text>{this.state.showDescription ? overview || 'No description' : null}</Card.Text>\r\n          <Button variant=\"dark\" size=\"sm\" className=\"mr-1 mb-1\" onClick={this.toogleDescription}>\r\n            {' '}\r\n            {this.state.showDescription ? 'Hide description' : 'Show description'}\r\n          </Button>\r\n          {this.state.willWatch ? (\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              className=\"mr-1 mb-1\"\r\n              onClick={() => {\r\n                this.setState({willWatch: false});\r\n                removeMoviesFromWillWatch(id);\r\n              }}\r\n            >\r\n              Won't watch\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              variant=\"success\"\r\n              size=\"sm\"\r\n              className=\"mr-1 mb-1\"\r\n              onClick={() => {\r\n                this.setState({willWatch: true});\r\n                addMoviesToWillWatch(movie);\r\n              }}\r\n            >\r\n              Will watch\r\n            </Button>\r\n          )}\r\n          <Button\r\n            variant=\"outline-danger\"\r\n            size=\"sm\"\r\n            className=\"mb-1\"\r\n            onClick={removeMovie.bind(null, id)}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Pagination} from 'react-bootstrap';\r\n\r\nconst PaginationList = props => {\r\n  const {activePage, updatePage} = props;\r\n\r\n  const handleClick = number => () => {\r\n    updatePage(number);\r\n  };\r\n  let active = activePage;\r\n  let items = [];\r\n  for (let number = 1; number <= 5; number++) {\r\n    items.push(\r\n      <Pagination.Item key={number} active={number === active} onClick={handleClick(number)}>\r\n        {number}\r\n      </Pagination.Item>\r\n    );\r\n  }\r\n  return <Pagination className=\"mx-auto\">{items}</Pagination>;\r\n};\r\n\r\nexport default PaginationList;\r\n","export const API_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport const API_KEY_3 = '23506cba8a6228cba81e4c4c021d4ecd';\r\n","import React from 'react';\nimport Header from './Header';\nimport MovieItem from './MovieItem';\nimport PaginationList from './PaginationList';\nimport {API_URL, API_KEY_3} from '../utils/api';\nimport {Container, Row, Col, ListGroup, Badge} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\n\nclass App extends React.Component {\n  state = {\n    movies: [],\n    moviesWillWatch: [],\n    sortBy: 'popularity.desc',\n    activePage: 1\n  };\n\n  getMoviesData = () => {\n    fetch(\n      `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sortBy}&page=${this.state.activePage}`\n    )\n      .then(response => response.json())\n      .then(data => this.setState({movies: data.results}));\n  };\n\n  updateSortBy = sortBy => {\n    this.setState({sortBy: sortBy});\n  };\n\n  updatePage = page => {\n    this.setState({activePage: page});\n  };\n\n  removeMovie = id => {\n    const updatedMovies = this.state.movies.filter(movie => {\n      return movie.id !== id;\n    });\n\n    const updatedMoviesWillWatch = this.state.moviesWillWatch.filter(movie => {\n      return movie.id !== id;\n    });\n    this.setState({movies: updatedMovies, moviesWillWatch: updatedMoviesWillWatch});\n  };\n\n  addMoviesToWillWatch = movie => {\n    const updatedMovies = [...this.state.moviesWillWatch, movie];\n    this.setState({moviesWillWatch: updatedMovies});\n  };\n\n  removeMoviesFromWillWatch = id => {\n    const updatedMovies = this.state.moviesWillWatch.filter(movie => {\n      return movie.id !== id;\n    });\n    this.setState({moviesWillWatch: updatedMovies});\n  };\n\n  componentWillMount() {\n    this.getMoviesData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sortBy !== this.state.sortBy || prevState.activePage !== this.state.activePage) {\n      this.getMoviesData();\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row className=\"border-top-0 border-primary my-3\">\n          <Header updateSortBy={this.updateSortBy} />\n        </Row>\n        <Row>\n          <Col sm=\"9\">\n            <Row>\n              {this.state.movies.map(movie => (\n                <Col lg=\"4\" sm=\"6\" key={movie.id}>\n                  <MovieItem\n                    movie={movie}\n                    removeMovie={this.removeMovie}\n                    addMoviesToWillWatch={this.addMoviesToWillWatch}\n                    removeMoviesFromWillWatch={this.removeMoviesFromWillWatch}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col sm=\"3\">\n            <div className=\"favorites\">\n              <h4 className=\"favorites__label\">\n                Will watch movies: {this.state.moviesWillWatch.length}\n              </h4>\n              <ListGroup variant=\"flush\" className=\"favorites__list\">\n                {this.state.moviesWillWatch.map(movie => (\n                  <ListGroup.Item key={movie.id}>\n                    {movie.title}\n                    <Badge pill variant=\"success\" className=\"ml-2\">\n                      {movie.vote_average}\n                    </Badge>\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </div>\n          </Col>\n        </Row>\n        <Row>\n          <PaginationList activePage={this.state.activePage} updatePage={this.updatePage} />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <\n  App / > ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}